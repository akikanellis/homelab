---
services:
  netdata:
    image: netdata/netdata:v1.42.2@sha256:068dccfac13bee73296e5fb775dbe95b622ec9921d8b7e2d21aa1bb7801b9355 # editorconfig-checker-disable-line
    hostname: "netdata-{{ inventory_hostname }}"
    environment:
      TZ: "{{ timezone }}"

      DOCKER_HOST: docker-socket-proxy:2375
    volumes:
      - "{{ volumes_directory }}/netdata:/etc/netdata:ro"

      - /etc/group:/host/etc/group:ro
      - /etc/passwd:/host/etc/passwd:ro
      - /proc:/host/proc:ro
      - /sys:/host/sys:ro
    ports:
      - "19999:19999"
    security_opt:
      - apparmor:unconfined
    cap_add:
      - SYS_PTRACE
    restart: always

  docker-socket-proxy:
    image: ghcr.io/tecnativa/docker-socket-proxy:0.1.1@sha256:6c22b9545adc95258af9deffdde6c0ce0a0a70716771e5a4e02d24d1b6e0dda1 # editorconfig-checker-disable-line
    environment:
      TZ: "{{ timezone }}"

      CONTAINERS: 1
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock:ro
    ports:
      - "2375:2375"
    restart: always

  prometheus:
    image: prom/prometheus:v2.46.0@sha256:d6ead9daf2355b9923479e24d7e93f246253ee6a5eb18a61b0f607219f341a80 # editorconfig-checker-disable-line
    user: "{{ ansible_admin_user_uid }}:{{ ansible_admin_user_gid }}"
    environment:
      TZ: "{{ timezone }}"
    volumes:
      - "{{ volumes_directory }}/prometheus/etc-prometheus:/etc/prometheus"
      - "{{ volumes_directory }}/prometheus/prometheus:/prometheus"
    ports:
      - "9090:9090"
    restart: always

  unpoller:
    image: ghcr.io/unpoller/unpoller:v2.8.1@sha256:cca00aabddd802637c93461263cf9f60e879fbca93fa80fa49ec2ca97e136e63 # editorconfig-checker-disable-line
    environment:
      TZ: "{{ timezone }}"
    volumes:
      - "{{ volumes_directory }}/unpoller/config:/config"
    ports:
      - "9130:9130"
    restart: always

  grafana:
    image: grafana/grafana-oss:10.1.0@sha256:047c1c5aa6fef257b6c2516f95c8fcd9f28707c201c6413dd78328b6cbedff6f # editorconfig-checker-disable-line
    user: "{{ ansible_admin_user_uid }}:{{ ansible_admin_user_gid }}"
    environment:
      TZ: "{{ timezone }}"

      GF_INSTALL_PLUGINS: >
          grafana-clock-panel,grafana-piechart-panel,natel-discrete-panel
    volumes:
      - "{{ volumes_directory }}/grafana/etc-grafana:/etc/grafana"
      - "{{ volumes_directory }}/grafana/var-lib-grafana:/var/lib/grafana"
    ports:
      - "3000:3000"
    restart: always

  graylog:
    image: graylog/graylog:4.3.15@sha256:2f6a1ba45cbd4af6382fe325d443f430beaf2cafc76b70d2ab3e90cba563f574 # editorconfig-checker-disable-line
    environment:
      TZ: "{{ timezone }}"
    volumes:
      - "{{ volumes_directory }}/graylog:/usr/share/graylog/data"
    ports:
      # Web interface and REST API
      - "9900:9900"

      # Syslog
      - "514:514"
      - "514:514/udp"

      # GELF
      - "12201:12201"
      - "12201:12201/udp"
    entrypoint: >
      /usr/bin/tini -- wait-for-it elasticsearch:9200 -- /docker-entrypoint.sh
    links:
      - mongodb:mongo
      - elasticsearch
    depends_on:
      - mongodb
      - elasticsearch
    restart: always

  mongodb:
    image: mongo:4.4.24@sha256:033255f596fb18ee947fabef1377f666f96ff0c0328242a7ff219c284537a76f # editorconfig-checker-disable-line
    user: "{{ ansible_admin_user_uid }}:{{ ansible_admin_user_gid }}"
    environment:
      TZ: "{{ timezone }}"
    volumes:
      - "{{ volumes_directory }}/mongodb/db:/data/db"
    restart: always

  elasticsearch:
    image: docker.elastic.co/elasticsearch/elasticsearch-oss:7.10.2@sha256:2c257b68f361872e13bdd476cba152e232a314ec61b0eedfc1f71b628ba39432 # editorconfig-checker-disable-line
    environment:
      TZ: "{{ timezone }}"

      http.host: 0.0.0.0
      network.host: 0.0.0.0
      transport.host: localhost
    volumes:
      - "{{ volumes_directory }}/elasticsearch:/usr/share/elasticsearch/data"
    restart: always

  autoheal:
    image: willfarrell/autoheal:1.2.0@sha256:31f580ef0279eaced5b38d631b08c474d70d8403c1c2fdd6ddcf2e879d5f3f7c # editorconfig-checker-disable-line
    environment:
      TZ: "{{ timezone }}"

      AUTOHEAL_CONTAINER_LABEL: all
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
    restart: always
